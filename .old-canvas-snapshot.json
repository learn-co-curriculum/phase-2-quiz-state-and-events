{
  "quiz": {
    "id": 43047,
    "title": "State and Events Quiz",
    "html_url": "https://learning.flatironschool.com/courses/6667/quizzes/43047",
    "mobile_url": "https://learning.flatironschool.com/courses/6667/quizzes/43047?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-2-quiz-state-and-events\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-2-quiz-state-and-events/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 14,
    "points_possible": 14.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_43047"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/6667/quizzes/43047/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/6667/quizzes/43047/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/6667/quizzes/43047/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/6667/quizzes/43047/submission_versions",
    "assignment_id": 224923,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 19905,
    "show_correct_answers_last_attempt": true,
    "version_number": 4,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "g74f32b2b01e79a9aade02b3c28017483",
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 291568,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566421,
      "position": null,
      "question_name": "React Information Flow",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We're building a feature in a React application to allow users to search for\nparticular items. When the user enters some text in the <code>SearchBar</code> component,\nthe <code>ItemList</code> component should update which <code>Item</code> components are being\ndisplayed.</p>\n\n<p>Here's the component hierarchy:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>App\n├─── SearchBar\n└─── ItemList\n    ├─── Item\n    └─── Item\n</code></pre></div>\n<p>To build this feature, which component would need to hold the <code>searchText</code>\nstate?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React Information Flow",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-information-flow\">React Information Flow</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5724,
          "text": "",
          "html": "<p>App</p>",
          "comments": "",
          "comments_html": "<p>Right! Since both the <code>SearchBar</code> and <code>ItemList</code> components need access to this\nstate, this state would need to be held in their closest common parent, which is\n<code>App</code>.</p>",
          "weight": 100.0
        },
        {
          "id": 946,
          "text": "",
          "html": "<p>SearchBar</p>",
          "comments": "",
          "comments_html": "<p>Since both the <code>SearchBar</code> and <code>ItemList</code> components need access to this state,\nthis state would need to be held in their closest common parent, which is <code>App</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 857,
          "text": "",
          "html": "<p>ItemList</p>",
          "comments": "",
          "comments_html": "<p>Since both the <code>SearchBar</code> and <code>ItemList</code> components need access to this state,\nthis state would need to be held in their closest common parent, which is <code>App</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 3304,
          "text": "",
          "html": "<p>Item</p>",
          "comments": "",
          "comments_html": "<p>Since both the <code>SearchBar</code> and <code>ItemList</code> components need access to this state,\nthis state would need to be held in their closest common parent, which is <code>App</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 8789,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Since both the <code>SearchBar</code> and <code>ItemList</code> components need access to this state,\nthis state would need to be held in their closest common parent, which is <code>App</code>.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291569,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566427,
      "position": null,
      "question_name": "Controlled Components",
      "question_type": "short_answer_question",
      "question_text": "<p>A <strong>controlled component</strong> is a component that derives its input values from\n____.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "Be sure to study the source/s for this question. You'll get it next time.",
      "neutral_comments": "Source/s:Controlled Components",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/controlled-components\">Controlled Components</a></li></ul><p></p>",
      "answers": [
        {
          "id": "3847",
          "text": "State",
          "comments": "",
          "comments_html": "",
          "weight": 100
        },
        {
          "id": "5832",
          "text": "state",
          "comments": "",
          "comments_html": "",
          "weight": 100
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291570,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566426,
      "position": null,
      "question_name": "State and Arrays",
      "question_type": "true_false_question",
      "question_text": "<p>Any time you want to make a change (adding, updating or deleting an item) to an\narray that's being stored in state, you first need to make a copy of the array\nusing the spread operator.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React State and Arrays",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state-and-arrays\">React State and Arrays</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Using the spread operator isn't always necessary when updating state with an\narray. The important thing is that whatever value is passed to the setter\nfunction for that state is a <strong>new object</strong> rather than a reference to an\nexisting object.</p>\n\n<p>You can use other array methods, like <code>map</code> or <code>filter</code>, to produce a new\nobject; it doesn't need to be the spread operator exclusively.</p>",
          "text": "True",
          "weight": 0,
          "id": 5049
        },
        {
          "comments": "",
          "comments_html": "<p>Correct! Using the spread operator isn't always necessary when updating state\nwith an array. The important thing is that whatever value is passed to the\nsetter function for that state is a <strong>new object</strong> rather than a reference to an\nexisting object.</p>\n\n<p>You can use other array methods, like <code>map</code> or <code>filter</code>, to produce a new\nobject; it doesn't need to be the spread operator exclusively.</p>",
          "text": "False",
          "weight": 100,
          "id": 9010
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291571,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566431,
      "position": null,
      "question_name": "Component Data",
      "question_type": "fill_in_multiple_blanks_question",
      "question_text": "<p>Fill in the blanks:</p>\n\n<p>[blank1] is data passed down to a child component from a parent component.</p>\n\n<p>[blank2] is data held internally by React that can be accessed in a component,\nand can change over time.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "Be sure to study the source/s for this question. You'll get it next time.",
      "neutral_comments": "Source/s:React StateProps Basics",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state\">React State</a></li><li><a href=\"/courses/6667/pages/props-basics\">Props Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": "2575",
          "text": "props",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "blank1"
        },
        {
          "id": "9656",
          "text": "Props",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "blank1"
        },
        {
          "id": "567",
          "text": "state",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "blank2"
        },
        {
          "id": "8637",
          "text": "State",
          "comments": "",
          "comments_html": "",
          "weight": 100.0,
          "blank_id": "blank2"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291572,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566423,
      "position": null,
      "question_name": "Events",
      "question_type": "true_false_question",
      "question_text": "<p>Event listeners cannot be attached directly to our custom React components.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Event Handling in React",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/event-handling-in-react\">Event Handling in React</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Right! We can't attach event listeners directly to components, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">MyButton</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Event listeners can only be attached to DOM elements in JSX, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click Me!button&gt;;\n}\n</code></pre></div>",
          "text": "True",
          "weight": 100,
          "id": 8421
        },
        {
          "comments": "",
          "comments_html": "<p>We can't attach event listeners directly to components, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">MyButton</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Event listeners can only be attached to DOM elements in JSX, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click Me!button&gt;;\n}\n</code></pre></div>",
          "text": "False",
          "weight": 0,
          "id": 7703
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291573,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566434,
      "position": null,
      "question_name": "State and Arrays",
      "question_type": "matching_question",
      "question_text": "<p>For each desired change to an array that's being stored in state, select the\nmost appropriate method/operator to use:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "Be sure to study the source/s for this question. You'll get it next time.",
      "neutral_comments": "Source/s:React State and Arrays",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state-and-arrays\">React State and Arrays</a></li></ul><p></p>",
      "answers": [
        {
          "id": "3929",
          "text": "Adding an item to an array",
          "left": "Adding an item to an array",
          "right": "spread operator",
          "comments": "",
          "comments_html": "",
          "match_id": 968
        },
        {
          "id": "2196",
          "text": "Removing an item from an array",
          "left": "Removing an item from an array",
          "right": "filter",
          "comments": "",
          "comments_html": "",
          "match_id": 3217
        },
        {
          "id": "6370",
          "text": "Updating an item in an array",
          "left": "Updating an item in an array",
          "right": "map",
          "comments": "",
          "comments_html": "",
          "match_id": 7112
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": [
        {
          "text": "spread operator",
          "match_id": 968
        },
        {
          "text": "filter",
          "match_id": 3217
        },
        {
          "text": "map",
          "match_id": 7112
        }
      ],
      "matching_answer_incorrect_matches": ""
    },
    {
      "id": 291574,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566422,
      "position": null,
      "question_name": "Information Flow",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Given the following components:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Parent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">setIsOn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Child</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Child</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>Toggle<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In order to update the <code>isOn</code> state in the <code>&lt;Parent /&gt;</code> component when the\nbutton is clicked in the <code>&lt;Child /&gt;</code> component, you would need to:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React Information Flow",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-information-flow\">React Information Flow</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2581,
          "text": "",
          "html": "<p>Pass a callback function as a prop from the <code>&lt;Parent /&gt;</code> to the <code>&lt;Child /&gt;</code>, and\ncall it from the <code>&lt;Child /&gt;</code> component.</p>",
          "comments": "",
          "comments_html": "<p>Right! We would need to do something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Parent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">setIsOn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Child</span> <span class=\"na\">isOn</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">isOn</span><span class=\"si\">}</span> <span class=\"na\">onToggleClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setIsOn</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Child</span><span class=\"p\">({</span> <span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">onToggleClick</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">onToggleClick</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isOn</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Toggle<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
          "weight": 100.0
        },
        {
          "id": 2695,
          "text": "",
          "html": "<p>Export the <code>setState()</code> function from the <code>&lt;Parent /&gt;</code>, and import it so that\nyou can call it from the <code>&lt;Child /&gt;</code> component.</p>",
          "comments": "",
          "comments_html": "<p>We can't explicitly export our <code>setState()</code> function, but we can use a\ncallback function to use our state as props in another component! We would\nneed to do something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Parent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">setIsOn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Child</span> <span class=\"na\">isOn</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">isOn</span><span class=\"si\">}</span> <span class=\"na\">onToggleClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setIsOn</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Child</span><span class=\"p\">({</span> <span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">onToggleClick</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">onToggleClick</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isOn</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Toggle<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
          "weight": 0.0
        },
        {
          "id": 9920,
          "text": "",
          "html": "<p>Data only flows downward in React so it is not possible to change the\n<code>&lt;Parent /&gt;</code> component's state from the <code>&lt;Child /&gt;</code> component.</p>",
          "comments": "",
          "comments_html": "<p>Using inverse data flow, we are able to use props/state to update a parent\ncomponent's state from its children! We could do something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Parent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">setIsOn</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nc\">Child</span> <span class=\"na\">isOn</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">isOn</span><span class=\"si\">}</span> <span class=\"na\">onToggleClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setIsOn</span><span class=\"si\">}</span> <span class=\"p\">/&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Child</span><span class=\"p\">({</span> <span class=\"nx\">isOn</span><span class=\"p\">,</span> <span class=\"nx\">onToggleClick</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">onToggleClick</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isOn</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Toggle<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
          "weight": 0.0
        },
        {
          "id": 5187,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291575,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566429,
      "position": null,
      "question_name": "State and Arrays",
      "question_type": "true_false_question",
      "question_text": "<p>Given the following component:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">numbers</span><span class=\"p\">,</span> <span class=\"nx\">setNumbers</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">([]);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">addNumber</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">numbers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"nx\">setNumbers</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">addNumber</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Add<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Clicking the button would cause the component to re-render.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React State and Arrays",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state-and-arrays\">React State and Arrays</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Since we're passing a reference to the same <code>numbers</code> variable to\n<code>setNumbers</code>, React will not re-render our component. We would need to make a\ncopy of the <code>numbers</code> array before calling <code>setNumbers</code>, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addNumber</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">newNumbers</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">numbers</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">setNumbers</span><span class=\"p\">(</span><span class=\"nx\">newNumbers</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
          "text": "True",
          "weight": 0,
          "id": 9149
        },
        {
          "comments": "",
          "comments_html": "<p>Correct!</p>\n\n<p>Since we're passing a reference to the same <code>numbers</code> variable to\n<code>setNumbers</code>, React will not re-render our component. We would need to make a \ncopy of the <code>numbers</code> array before calling <code>setNumbers</code>, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addNumber</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">newNumbers</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">numbers</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">setNumbers</span><span class=\"p\">(</span><span class=\"nx\">newNumbers</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
          "text": "False",
          "weight": 100,
          "id": 9273
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291576,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566428,
      "position": null,
      "question_name": "Controlled Components",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Select all that apply. Setting up a controlled form <strong>requires</strong> :</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Controlled Components",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/controlled-components\">Controlled Components</a></li></ul><p></p>",
      "answers": [
        {
          "id": "1393",
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! To ensure that our <strong>component state</strong> always matches the data in\nthe <strong>form</strong> , we need to update state any time the input changes:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setName</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"si\">}</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">name</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>",
          "weight": 100.0,
          "html": "<p>Setting up an event listener to update state as the user enters data in an input\nfield.</p>"
        },
        {
          "id": "1730",
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! To ensure our <strong>form</strong> always matches our <strong>component state</strong> , we need\nto synchronize the <strong>value</strong> of each input field with state:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"p\">=</span><span class=\"s\">\"text\"</span> <span class=\"na\">onChange</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setName</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"si\">}</span> <span class=\"na\">value</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">name</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>",
          "weight": 100.0,
          "html": "<p>Updating the information in an input field to reflect state.</p>"
        },
        {
          "id": "2784",
          "text": "",
          "comments": "",
          "comments_html": "<p>While holding state in a parent component is necessary in some scenarios, such\nas when multiple components depend on the same state from the form input fields,\nit is not required.</p>",
          "weight": 0.0,
          "html": "<p>Moving state out of the form component and into a parent component.</p>"
        },
        {
          "id": "6822",
          "text": "",
          "comments": "",
          "comments_html": "<p>Validating user information is helpful, but it is not required when setting up a\ncontrolled form.</p>",
          "weight": 0.0,
          "html": "<p>Validating the information the user enters.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291577,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566424,
      "position": null,
      "question_name": "React Information Flow",
      "question_type": "true_false_question",
      "question_text": "<p>Given the following component hierarchy:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>App\n├─── SearchBar\n└─── ItemList\n    ├─── Item\n    └─── Item\n</code></pre></div>\n<p>It's possible for the <code>ItemList</code> component to access state that is contained in\nthe <code>SearchBar</code> component.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React Information Flow",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-information-flow\">React Information Flow</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Sibling components have no way of accessing each others' state directly. The\nstate would need to be stored in the <code>App</code> component in order for the<code>ItemList</code>\nand the <code>SearchBar</code> component both to be able to access that state.</p>",
          "text": "True",
          "weight": 0,
          "id": 9208
        },
        {
          "comments": "",
          "comments_html": "<p>Right! Sibling components have no way of accessing each others' state directly.\nThe state would need to be stored in the <code>App</code> component in order for the\n<code>ItemList</code> and the <code>SearchBar</code> component both to be able to access that state.</p>",
          "text": "False",
          "weight": 100,
          "id": 7206
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291578,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566430,
      "position": null,
      "question_name": "State",
      "question_type": "true_false_question",
      "question_text": "<p>React will <strong>always</strong> re-render a component when the <code>setState</code> function is\ncalled.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React StateReact State and Arrays",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state\">React State</a></li><li><a href=\"/courses/6667/pages/react-state-and-arrays\">React State and Arrays</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>React will only re-render a component when <code>setState</code> is called with a new\nobject. For example, this code would not cause a re-render:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">setNums</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">([]);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">nums</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"nx\">setNums</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Addbutton&gt;;\n}\n</code></pre></div>\n<p>Since we are passing a reference to same <code>nums</code> object in memory, React will not\nre-render our component. We'd need to pass a new object to <code>setNums</code>instead:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">setNums</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">([]);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newNums</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"nx\">setNums</span><span class=\"p\">(</span><span class=\"nx\">newNums</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Addbutton&gt;;\n}\n</code></pre></div>",
          "text": "True",
          "weight": 0,
          "id": 4729
        },
        {
          "comments": "",
          "comments_html": "<p>Correct! React will only re-render a component when <code>setState</code> is called with a\nnew object. For example, this code would not cause a re-render:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">setNums</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">([]);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">nums</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"nx\">setNums</span><span class=\"p\">(</span><span class=\"nx\">nums</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Addbutton&gt;;\n}\n</code></pre></div>\n<p>Since we are passing a reference to same <code>nums</code> object in memory, React will not\nre-render our component. We'd need to pass a new object to <code>setNums</code>instead:</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"nx\">setNums</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">([]);</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newNums</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">nums</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"nx\">setNums</span><span class=\"p\">(</span><span class=\"nx\">newNums</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Addbutton&gt;;\n}\n</code></pre></div>",
          "text": "False",
          "weight": 100,
          "id": 6797
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291579,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566433,
      "position": null,
      "question_name": "State",
      "question_type": "multiple_choice_question",
      "question_text": "<p>When <code>useState()</code> is called, it returns:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React State",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-state\">React State</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2346,
          "text": "",
          "html": "<p>An array containing:</p>\n\n<ul>\n<li>the current value for state</li>\n<li>a function to update that value</li>\n</ul>",
          "comments": "",
          "comments_html": "<p>Right! Calling <code>useState</code> always returns an array, which we typically assign to\ntwo variables using array destructuring syntax:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div>",
          "weight": 100.0
        },
        {
          "id": 9869,
          "text": "",
          "html": "<p>A single value representing the current state</p>",
          "comments": "",
          "comments_html": "<p>Not quite. One thing returned by <code>useState</code> is the value representing the\ncurrent state. However, calling <code>useState</code> always returns an array, which we\ntypically assign to two variables using array destructuring syntax:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">,</span> <span class=\"nx\">setCount</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div>",
          "weight": 0.0
        },
        {
          "id": 2392,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291580,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566432,
      "position": null,
      "question_name": "Controlled Components",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Which of the following are advantages of using controlled components? Select all\nthat apply.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Controlled Components",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/controlled-components\">Controlled Components</a></li></ul><p></p>",
      "answers": [
        {
          "id": "4404",
          "text": "",
          "comments": "",
          "comments_html": "<p>Using controlled components typically involves writing more code than\nuncontrolled components, but there are several advantages that can make the\nextra code worthwhile!</p>",
          "weight": 0.0,
          "html": "<p>It helps us keep the amount of code we need to a minimum.</p>"
        },
        {
          "id": "2675",
          "text": "",
          "comments": "",
          "comments_html": "<p>Separation of concerns is a huge benefit of using controlled forms!</p>",
          "weight": 100.0,
          "html": "<p>It allows us to keep the code that handles logic separate from the code that\nhandles display of data.</p>"
        },
        {
          "id": "8852",
          "text": "",
          "comments": "",
          "comments_html": "<p>By using a controlled form, it easily allows us to implement validations.</p>",
          "weight": 100.0,
          "html": "<p>It allows us to ensure that input values are valid.</p>"
        },
        {
          "id": "5218",
          "text": "",
          "comments": "",
          "comments_html": "<p>When using a controlled form, we are able to use state to pass the form values\ninto other components!</p>",
          "weight": 100.0,
          "html": "<p>It allows us to make the input values available to other components in our app.</p>"
        },
        {
          "id": "5278",
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 291581,
      "quiz_id": 43047,
      "quiz_group_id": null,
      "assessment_question_id": 566425,
      "position": null,
      "question_name": "Information Flow",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Which of the following shows the correct way to set up an event listener that\npasses a value to the callback function, and prints <code>Hello World!!</code> to the\nconsole when the button is clicked?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:React Information Flow",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/6667/pages/react-information-flow\">React Information Flow</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6049,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">MyButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">!!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"dl\">\"</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click Me!<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    div&gt;\n  );\n}\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Nice! Remember, <code>onClick</code> expects a callback function as an argument. By\ndefining an arrow function here, we're able to pass a callback function that\nwill call the <code>handleClick</code> function with the correct data.</p>",
          "weight": 100.0
        },
        {
          "id": 300,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">MyButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">!!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"dl\">\"</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click Me!<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    div&gt;\n  );\n}\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Remember, <code>onClick</code> expects a callback function as an argument. In this example,\nwe're <strong>invoking</strong> <code>handleClick</code> and passing its return value (<code>undefined</code>) to\nthe <code>onClick</code> listener, so the behavior of this component will be to:</p>\n\n<ul>\n<li>Immediately display <code>Hello World!!</code> in the console, before the button is clicked</li>\n<li>Do nothing when the button is actually clicked</li>\n</ul>",
          "weight": 0.0
        },
        {
          "id": 5855,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"kd\">function</span> <span class=\"nx\">MyButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">handleClick</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">!!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">onClick</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">handleClick</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Click Me!<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    div&gt;\n  );\n}\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. When we click the button, the argument that will be passed to\nthe<code>handleClick</code> function is the <code>event</code> object, not the string <code>Hello World</code> as\nwe would like. So this will log <code>[object Object]!!</code></p>",
          "weight": 0.0
        },
        {
          "id": 4613,
          "text": "",
          "html": "<p>More than one of the above will work.</p>",
          "comments": "",
          "comments_html": "<p>Try these out in <a href=\"https://codesandbox.io/s/react-new\">CodeSandbox</a>! Only one of\nthe options will give us our desired result.</p>",
          "weight": 0.0
        },
        {
          "id": 2222,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}